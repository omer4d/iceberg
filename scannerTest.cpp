/* Generated by re2c 0.13.5 on Wed May 21 20:54:33 2014 */
#line 1 "scannerTestRe2c.cpp"
#include <cstdio>
#include <string>

struct Token {
    enum Type {
        ID, INT_LITERAL, OBR, CBR, END_OF_INPUT, INVALID
    };
    
    Type type;
    char const* start;
    char const* end;
    
    Token(Type type_): type(type_), start(nullptr), end(nullptr)
    {
        
    }
    
    Token(Type type_, char const* start_, char const* end_): type(type_), start(start_), end(end_)
    {
    }
    
    std::string text()
    {
        return std::string(start, end);
    }
};

struct Scanner {
    char const* cursor;
    
    Scanner(char const* str): cursor(str)
    {
    }
    
    Token next()
    {
        char const* tokStart;
        
start:
        tokStart = cursor;
    
        
#line 46 "scannerTest.cpp"
{
	char yych;

	yych = *cursor;
	switch (yych) {
	case 0x00:	goto yy12;
	case '\t':
	case '\n':
	case '\f':
	case '\r':
	case ' ':	goto yy10;
	case '!':
	case '$':
	case '%':
	case '&':
	case '*':
	case '+':
	case ',':
	case '-':
	case '.':
	case '/':
	case ':':
	case '<':
	case '=':
	case '>':
	case '?':
	case '@':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '^':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':
	case '~':	goto yy6;
	case '(':	goto yy2;
	case ')':	goto yy4;
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy8;
	default:	goto yy14;
	}
yy2:
	++cursor;
#line 51 "scannerTestRe2c.cpp"
	{ return Token(Token::OBR, tokStart, cursor); }
#line 147 "scannerTest.cpp"
yy4:
	++cursor;
#line 52 "scannerTestRe2c.cpp"
	{ return Token(Token::CBR, tokStart, cursor); }
#line 152 "scannerTest.cpp"
yy6:
	++cursor;
	yych = *cursor;
	goto yy19;
yy7:
#line 53 "scannerTestRe2c.cpp"
	{ return Token(Token::ID, tokStart, cursor); }
#line 160 "scannerTest.cpp"
yy8:
	++cursor;
	yych = *cursor;
	goto yy17;
yy9:
#line 54 "scannerTestRe2c.cpp"
	{ return Token(Token::INT_LITERAL, tokStart, cursor); }
#line 168 "scannerTest.cpp"
yy10:
	++cursor;
#line 55 "scannerTestRe2c.cpp"
	{ goto start; }
#line 173 "scannerTest.cpp"
yy12:
	++cursor;
#line 56 "scannerTestRe2c.cpp"
	{ return Token(Token::END_OF_INPUT); }
#line 178 "scannerTest.cpp"
yy14:
	++cursor;
#line 57 "scannerTestRe2c.cpp"
	{ return Token(Token::INVALID, tokStart, cursor); }
#line 183 "scannerTest.cpp"
yy16:
	++cursor;
	yych = *cursor;
yy17:
	switch (yych) {
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':	goto yy16;
	default:	goto yy9;
	}
yy18:
	++cursor;
	yych = *cursor;
yy19:
	switch (yych) {
	case '!':
	case '$':
	case '%':
	case '&':
	case '*':
	case '+':
	case ',':
	case '-':
	case '.':
	case '/':
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	case ':':
	case '<':
	case '=':
	case '>':
	case '?':
	case '@':
	case 'A':
	case 'B':
	case 'C':
	case 'D':
	case 'E':
	case 'F':
	case 'G':
	case 'H':
	case 'I':
	case 'J':
	case 'K':
	case 'L':
	case 'M':
	case 'N':
	case 'O':
	case 'P':
	case 'Q':
	case 'R':
	case 'S':
	case 'T':
	case 'U':
	case 'V':
	case 'W':
	case 'X':
	case 'Y':
	case 'Z':
	case '^':
	case '_':
	case 'a':
	case 'b':
	case 'c':
	case 'd':
	case 'e':
	case 'f':
	case 'g':
	case 'h':
	case 'i':
	case 'j':
	case 'k':
	case 'l':
	case 'm':
	case 'n':
	case 'o':
	case 'p':
	case 'q':
	case 'r':
	case 's':
	case 't':
	case 'u':
	case 'v':
	case 'w':
	case 'x':
	case 'y':
	case 'z':
	case '~':	goto yy18;
	default:	goto yy7;
	}
}
#line 58 "scannerTestRe2c.cpp"

    }
};

int main()
{
    Scanner scanner("123 (0456.@$@%789)))");
    
    for(Token tok = scanner.next(); tok.type != Token::END_OF_INPUT; tok = scanner.next())
    {
        if(tok.type == Token::INVALID)
        {
            printf("Unexpected token (%s)\n", tok.text().c_str());
            break;
        }
        else
            printf("(%s)\n", tok.text().c_str());
    }
    
    return 0;
}